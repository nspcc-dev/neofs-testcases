name: NeoFS System Tests

on:
  workflow_call:
    inputs:
      neofs_network_domain:
        type: string
        description: 'NeoFS network domain to deploy tests report'
        required: true
      neofs_http_gate:
        type: string
        description: 'NeoFS http gate address to deploy tests report'
        required: true 
      neofs_store_objects_cid:
        type: string
        description: 'NeoFS container id to deploy tests report'
        required: true
      neofs_pr_expiration_period:
        type: string
        description: 'NeoFS tests report expiration period for PRs'
        required: true
      neofs_master_expiration_period:
        type: string
        description: 'NeoFS tests report expiration period for master commits'
        required: true
      neofs_manual_expiration_period:
        type: string
        description: 'NeoFS tests report expiration period for manual runs'
        required: true
      neofs_other_expiration_period:
        type: string
        description: 'NeoFS tests report expiration period for other purposes'
        required: true
      os:
        type: string
        description: 'Github runners in JSON format'
        required: false
        default: '[{runner: "ubuntu-latest", binary: "linux-amd64"}]'
      marks:
        type: string
        description: 'Pytest marks to execute certain tests; examples: sanity'
        required: false
        default: ''
      tests_path:
        type: string
        description: 'Path to tests; examples: pytest_tests/tests/s3'
        required: false
        default: 'pytest_tests/tests'
      tests_parallel_level:
        type: number
        description: 'Level of parallelization to be used by tests; examples: 3'
        required: false
        default: 1
      neofs_testcases_commit:
        type: string
        description: 'Ref to neofs-testcases repo'
        required: false
        default: 'master'
      neofs_node_commit:
        type: string
        description: 'Commit from neofs-node repo to build binaries'
        required: false
        default: 'from_tests'
      neofs_node_tag:
          type: string
          description: 'Tag from neofs-node repo to download binaries'
          required: false
          default: 'from_tests'
      neofs_s3_gw_commit:
        type: string
        description: 'Commit from neofs-s3-gw repo to build binaries'
        required: false
        default: 'from_tests'
      neofs_s3_gw_tag:
          type: string
          description: 'Tag from neofs-s3-gw repo to download binaries'
          required: false
          default: 'from_tests'
      neofs_rest_gw_commit:
        type: string
        description: 'Commit from neofs-rest-gw repo to build binaries'
        required: false
        default: 'from_tests'
      neofs_rest_gw_tag:
          type: string
          description: 'Tag from neofs-rest-gw repo to download binaries'
          required: false
          default: 'from_tests'
      neo_go_tag:
          type: string
          description: 'Tag from neo-go repo to download binaries'
          required: false
          default: 'from_tests'
    secrets:
      TEST_RESULTS_WALLET:
        description: 'NeoFS wallet to deploy tests report'
        required: true
      TEST_RESULTS_PASSWORD:
        description: 'NeoFS wallet password to deploy tests report'
        required: true

env:
  ALLURE_RESULTS_DIR: ${{ github.workspace }}/allure-results

jobs:
    run_system_tests:
        runs-on: ${{ matrix.runner }}
        outputs:
          shard_used: ${{ contains(toJson(matrix), '"shard"') }}
          os_matrix: ${{ inputs.os }}
        strategy:
          fail-fast: false
          max-parallel: 5
          matrix:
            include: ${{ fromJson(inputs.os) }}
        timeout-minutes: 500
        steps:
          - name: Set up Go
            uses: actions/setup-go@v5
            with:
              cache: true
              go-version: '1.22'
          - run: go version

          - name: Set up Python
            uses: actions/setup-python@v5
            with:
                python-version: '3.12'
          - run: python --version

          - name: Remove existing AWS CLI
            run: |
              sudo rm -rf /usr/local/aws-cli
              sudo rm /usr/local/bin/aws
            
          - name: Install AWS CLI 2.22.35 on Linux
            if: runner.os == 'Linux'
            run: |
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.22.35.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
              rm -rf aws awscliv2.zip

          - name: Install AWS CLI 2.22.35 on Macos
            if: runner.os == 'macOS'
            run: |
              curl "https://awscli.amazonaws.com/AWSCLIV2-2.22.35.pkg" -o "AWSCLIV2.pkg"
              sudo installer -pkg AWSCLIV2.pkg -target /
              rm AWSCLIV2.pkg
          
          - name: Verify AWS CLI version
            run: aws --version

          - name: Checkout neofs-testcases repository
            uses: actions/checkout@v4
            with:
              repository: nspcc-dev/neofs-testcases
              ref: ${{ inputs.neofs_testcases_commit }}
              path: neofs-testcases

          - name: Fix OpenSSL ripemd160
            run: |
              sudo python ./tools/src/openssl_config_fix.py
            working-directory: neofs-testcases

          - name: Checkout xk6-neofs repository
            uses: actions/checkout@v4
            with:
              repository: nspcc-dev/xk6-neofs
              ref: 'v0.2.0'
              fetch-depth: 0
              fetch-tags: true
              path: xk6-neofs

          - name: Download xk6-neofs
            uses: dsaltares/fetch-gh-release-asset@1.1.2
            with:
              repo: 'nspcc-dev/xk6-neofs'
              version: 'tags/v0.2.0'
              file: 'xk6-neofs-${{ matrix.binary }}'
              target: 'xk6-neofs/xk6-neofs'

          - name: Make xk6-neofs executable
            timeout-minutes: 30
            run: |
              sudo chmod a+x xk6-neofs
            working-directory: xk6-neofs

          - name: Checkout neofs-node repository
            if: ${{ inputs.neofs_node_commit != 'from_tests' }}
            uses: actions/checkout@v4
            with:
              repository: nspcc-dev/neofs-node
              ref: ${{ inputs.neofs_node_commit }}
              fetch-depth: 0
              fetch-tags: true
              path: neofs-node

          - name: Build neofs-node
            if: ${{ inputs.neofs_node_commit != 'from_tests' }}
            timeout-minutes: 5
            run: |
              make all
              echo "$(pwd)/bin" >> $GITHUB_PATH
            working-directory: neofs-node

          - name: Copy built neofs-node
            if: ${{ inputs.neofs_node_commit != 'from_tests' }}
            timeout-minutes: 30
            run: |
              cp ../neofs-node/bin/* .
              sudo chmod a+x neofs-cli
              sudo chmod a+x neofs-adm
              sudo chmod a+x neofs-ir
              sudo chmod a+x neofs-lens
              sudo chmod a+x neofs-node
            working-directory: neofs-testcases

          - name: Download neofs-cli
            if: ${{ inputs.neofs_node_tag != 'from_tests' }}
            uses: dsaltares/fetch-gh-release-asset@1.1.2
            with:
              repo: 'nspcc-dev/neofs-node'
              version: 'tags/${{ inputs.neofs_node_tag }}'
              file: 'neofs-cli-${{ matrix.binary }}'
              target: 'neofs-testcases/neofs-cli'

          - name: Download neofs-adm
            if: ${{ inputs.neofs_node_tag != 'from_tests' }}
            uses: dsaltares/fetch-gh-release-asset@1.1.2
            with:
              repo: 'nspcc-dev/neofs-node'
              version: 'tags/${{ inputs.neofs_node_tag }}'
              file: 'neofs-adm-${{ matrix.binary }}'
              target: 'neofs-testcases/neofs-adm'

          - name: Download neofs-ir
            if: ${{ inputs.neofs_node_tag != 'from_tests' }}
            uses: dsaltares/fetch-gh-release-asset@1.1.2
            with:
              repo: 'nspcc-dev/neofs-node'
              version: 'tags/${{ inputs.neofs_node_tag }}'
              file: 'neofs-ir-${{ matrix.binary }}'
              target: 'neofs-testcases/neofs-ir'

          - name: Download neofs-lens
            if: ${{ inputs.neofs_node_tag != 'from_tests' }}
            uses: dsaltares/fetch-gh-release-asset@1.1.2
            with:
              repo: 'nspcc-dev/neofs-node'
              version: 'tags/${{ inputs.neofs_node_tag }}'
              file: 'neofs-lens-${{ matrix.binary }}'
              target: 'neofs-testcases/neofs-lens'

          - name: Download neofs-node
            if: ${{ inputs.neofs_node_tag != 'from_tests' }}
            uses: dsaltares/fetch-gh-release-asset@1.1.2
            with:
              repo: 'nspcc-dev/neofs-node'
              version: 'tags/${{ inputs.neofs_node_tag }}'
              file: 'neofs-node-${{ matrix.binary }}'
              target: 'neofs-testcases/neofs-node'

          - name: Set permissions for downloaded neofs-node binaries
            if: ${{ inputs.neofs_node_tag != 'from_tests' }}
            run: |
              sudo chmod a+x neofs-cli
              sudo chmod a+x neofs-adm
              sudo chmod a+x neofs-ir
              sudo chmod a+x neofs-lens
              sudo chmod a+x neofs-node
            working-directory: neofs-testcases

          - name: Checkout neofs-s3-gw repository
            if: ${{ inputs.neofs_s3_gw_commit != 'from_tests' }}
            uses: actions/checkout@v4
            with:
              repository: nspcc-dev/neofs-s3-gw
              ref: ${{ inputs.neofs_s3_gw_commit }}
              fetch-depth: 0
              fetch-tags: true
              path: neofs-s3-gw

          - name: Build neofs-s3-gw
            if: ${{ inputs.neofs_s3_gw_commit != 'from_tests' }}
            run: |
              make all
            working-directory: neofs-s3-gw

          - name: Copy built neofs-s3-gw
            if: ${{ inputs.neofs_s3_gw_commit != 'from_tests' }}
            timeout-minutes: 30
            run: |
              cp ../neofs-s3-gw/bin/* .
              sudo chmod a+x neofs-s3-authmate
              sudo chmod a+x neofs-s3-gw
            working-directory: neofs-testcases

          - name: Download neofs-s3-gw
            if: ${{ inputs.neofs_s3_gw_tag != 'from_tests' }}
            uses: dsaltares/fetch-gh-release-asset@1.1.2
            with:
              repo: 'nspcc-dev/neofs-s3-gw'
              version: 'tags/${{ inputs.neofs_s3_gw_tag }}'
              file: 'neofs-s3-gw-${{ matrix.binary }}'
              target: 'neofs-testcases/neofs-s3-gw'

          - name: Download neofs-s3-authmate
            if: ${{ inputs.neofs_s3_gw_tag != 'from_tests' }}
            uses: dsaltares/fetch-gh-release-asset@1.1.2
            with:
              repo: 'nspcc-dev/neofs-s3-gw'
              version: 'tags/${{ inputs.neofs_s3_gw_tag }}'
              file: 'neofs-s3-authmate-${{ matrix.binary }}'
              target: 'neofs-testcases/neofs-s3-authmate'

          - name: Set permissions for downloaded neofs-s3 binaries
            if: ${{ inputs.neofs_s3_gw_tag != 'from_tests' }}
            run: |
              sudo chmod a+x neofs-s3-gw
              sudo chmod a+x neofs-s3-authmate
            working-directory: neofs-testcases

          - name: Checkout neofs-rest-gw repository
            if: ${{ inputs.neofs_rest_gw_commit != 'from_tests' }}
            uses: actions/checkout@v4
            with:
              repository: nspcc-dev/neofs-rest-gw
              ref: ${{ inputs.neofs_rest_gw_commit }}
              fetch-depth: 0
              fetch-tags: true
              path: neofs-rest-gw

          - name: Build neofs-rest-gw
            if: ${{ inputs.neofs_rest_gw_commit != 'from_tests' }}
            run: |
              make all
            working-directory: neofs-rest-gw

          - name: Copy and chmod built neofs-rest-gw
            if: ${{ inputs.neofs_rest_gw_commit != 'from_tests' }}
            timeout-minutes: 30
            run: |
              cp ../neofs-rest-gw/bin/* .
              sudo chmod a+x neofs-rest-gw
            working-directory: neofs-testcases

          - name: Download neofs-rest-gw
            if: ${{ inputs.neofs_rest_gw_tag != 'from_tests' }}
            uses: dsaltares/fetch-gh-release-asset@1.1.2
            with:
              repo: 'nspcc-dev/neofs-rest-gw'
              version: 'tags/${{ inputs.neofs_rest_gw_tag }}'
              file: 'neofs-rest-gw-${{ matrix.binary }}'
              target: 'neofs-testcases/neofs-rest-gw'

          - name: Set permissions for downloaded neofs-rest-gw binaries
            if: ${{ inputs.neofs_rest_gw_tag != 'from_tests' }}
            run: |
              sudo chmod a+x neofs-rest-gw
            working-directory: neofs-testcases

          - name: Download neo-go
            if: ${{ inputs.neo_go_tag != 'from_tests' }}
            uses: dsaltares/fetch-gh-release-asset@1.1.2
            with:
              repo: 'nspcc-dev/neo-go'
              version: 'tags/${{ inputs.neo_go_tag }}'
              file: 'neo-go-${{ matrix.binary }}'
              target: 'neofs-testcases/neo-go'

          - name: Set permissions for downloaded neo-go binaries
            if: ${{ inputs.neo_go_tag != 'from_tests' }}
            run: |
              sudo chmod a+x neo-go
            working-directory: neofs-testcases

          - name: Prepare venv
            id: prepare_venv
            timeout-minutes: 30
            run: |
              make venv.pytest
              echo "$(pwd)" >> $GITHUB_PATH
            working-directory: neofs-testcases

          - name: Run tests
            id: run_tests
            if: '!contains(toJson(matrix), ''"shard"'')'
            timeout-minutes: 120
            run: |
              source venv.pytest/bin/activate && pytest --timeout=1500 -n ${{ inputs.tests_parallel_level }} --show-capture=no -m "${{ inputs.marks }}" --alluredir=${GITHUB_WORKSPACE}/allure-results ${{ inputs.tests_path }}
            working-directory: neofs-testcases

          - name: Run sharded tests
            if: contains(toJson(matrix), '"shard"')
            id: run_sharded_tests
            run: |
              source venv.pytest/bin/activate
              python run-tests.py ${{ inputs.tests_parallel_level }} ${{ matrix.shard }} ${{ inputs.tests_path }} ${{ inputs.marks }}
            working-directory: neofs-testcases

          - name: Mark shard job result
            if: always() && contains(toJson(matrix), '"shard"')
            run: |
              echo "${{ job.status }}" > result-${{ matrix.shard }}.txt

          - name: Upload shard result
            if: always() && contains(toJson(matrix), '"shard"')
            uses: actions/upload-artifact@v4
            with:
              name: shard-result-${{ matrix.shard }}
              path: result-${{ matrix.shard }}.txt

          - name: Prepare Allure results from sharded run
            if: always() && contains(toJson(matrix), '"shard"')
            run: |
              SHARDED_RESULTS_DIR="${{ github.workspace }}/allure-results-${{ matrix.runner }}-${{ matrix.shard }}"
              echo "ALLURE_SHARDED_RESULTS_DIR=$SHARDED_RESULTS_DIR" >> "$GITHUB_ENV"
          
              mkdir -p "$SHARDED_RESULTS_DIR"
              rsync -a "${{ env.ALLURE_RESULTS_DIR }}/" "$SHARDED_RESULTS_DIR/"
          
              ZIP_NAME="allure-results-${{ matrix.runner }}-${{ matrix.shard }}.zip"
              cd "$SHARDED_RESULTS_DIR"
              find . -type f -print | zip -@ "$ZIP_NAME"
              find . -type f ! -name "$ZIP_NAME" -delete
              cd -
          
              timestamp=$(date +%s)
              echo "timestamp=$timestamp" >> "$GITHUB_OUTPUT"
              echo "NEOFS_ATTRIBUTES=RunNumber=${{ github.run_number }}-$timestamp,Type=neofs_test_files" >> "$GITHUB_ENV"
          
          - name: Upload Allure results from sharded run
            if: always() && contains(toJson(matrix), '"shard"')
            uses: nspcc-dev/gh-push-to-neofs@v0.3.1
            env:
              NEOFS_ATTRIBUTES: ${{ env.NEOFS_ATTRIBUTES }}
              ALLURE_SHARDED_RESULTS_DIR: ${{ env.ALLURE_SHARDED_RESULTS_DIR }}
            with:
              NEOFS_WALLET: ${{ secrets.TEST_RESULTS_WALLET }}
              NEOFS_WALLET_PASSWORD: ${{ secrets.TEST_RESULTS_PASSWORD }}
              NEOFS_NETWORK_DOMAIN: ${{ inputs.neofs_network_domain }}
              NEOFS_HTTP_GATE: ${{ inputs.neofs_http_gate }}
              STORE_OBJECTS_CID: ${{ inputs.neofs_store_objects_cid }}
              LIFETIME: ${{ inputs.neofs_pr_expiration_period }}
              PATH_TO_FILES_DIR: ${{ env.ALLURE_SHARDED_RESULTS_DIR }}
              NEOFS_ATTRIBUTES: ${{ env.NEOFS_ATTRIBUTES }}
            
          
          - name: Publish to NeoFS
            id: put_report
            if: always() && steps.prepare_venv.outcome == 'success' && !contains(toJson(matrix), 'shard')
            uses: nspcc-dev/gh-push-allure-report-to-neofs@master
            with:
              NEOFS_WALLET: ${{ secrets.TEST_RESULTS_WALLET }}
              NEOFS_WALLET_PASSWORD: ${{ secrets.TEST_RESULTS_PASSWORD }}
              NEOFS_NETWORK_DOMAIN: ${{ inputs.neofs_network_domain }}
              NEOFS_HTTP_GATE: ${{ inputs.neofs_http_gate }}
              STORE_OBJECTS_CID: ${{ inputs.neofs_store_objects_cid }}
              PR_LIFETIME: ${{ inputs.neofs_pr_expiration_period }}
              MASTER_LIFETIME: ${{ inputs.neofs_master_expiration_period }}
              MANUAL_RUN_LIFETIME: ${{ inputs.neofs_manual_expiration_period }}
              OTHER_LIFETIME: ${{ inputs.neofs_other_expiration_period }}
              ALLURE_RESULTS_DIR: ${{ env.ALLURE_RESULTS_DIR }}
              ALLURE_GENERATED_DIR: 'neofs-test-allure-generated-report'

          - name: Post the link to the report
            id: post_report_link
            timeout-minutes: 60
            if: always() && steps.put_report.outcome == 'success' && !contains(toJson(matrix), 'shard')
            env:
              REPORT_NEOFS_URL: ${{ steps.put_report.outputs.REPORT_NEOFS_URL }}index.html
            uses: guibranco/github-status-action-v2@v1.1.13
            with:
              authToken: ${{ secrets.GITHUB_TOKEN }}
              context: 'Test report ${{ matrix.runner }}'
              state: ${{ steps.run_tests.outcome == 'success' && 'success' || 'failure' }}
              sha: ${{ github.event.pull_request.head.sha || github.sha }}
              target_url: ${{ env.REPORT_NEOFS_URL }}

    merge_allure:
      name: Merge Allure Results from sharded run
      runs-on: ubuntu-latest
      needs: run_system_tests
      if: always()
      steps:
        - name: Download shard results
          uses: actions/download-artifact@v4
          with:
            path: shard-results

        - name: Install jq
          run: sudo apt-get update && sudo apt-get install -y jq

        - name: Determine final status from shard results
          id: shard_status
          run: |
            set -e
        
            files=$(find shard-results -type f -name 'result-*.txt')
        
            if [ -z "$files" ]; then
              echo "No shard result files found. Skipping report."
              echo "no_shards=true" >> $GITHUB_OUTPUT
              echo "state=skipped" >> $GITHUB_OUTPUT
              exit 0
            fi
        
            failed=0
            for file in $files; do
              if [ "$(cat "$file")" != "success" ]; then
                failed=1
                break
              fi
            done
        
            echo "no_shards=false" >> $GITHUB_OUTPUT
        
            if [ "$failed" -eq 1 ]; then
              echo "state=failure" >> $GITHUB_OUTPUT
            else
              echo "state=success" >> $GITHUB_OUTPUT
            fi

        - name: Download Allure artifacts from shards
          if: steps.shard_status.outputs.no_shards == 'false'
          run: |
            set -e
            mkdir -p merged-allure-results
        
            os_matrix_json='${{ needs.run_system_tests.outputs.os_matrix }}'
            echo "Matrix: $os_matrix_json"
        
            shard_count=0
        
            echo "$os_matrix_json" | jq -c '.[]' | while read -r entry; do
              runner=$(echo "$entry" | jq -r '.runner')
              shard=$(echo "$entry" | jq -r '.shard // empty')
        
              if [ -n "$shard" ]; then
                zip_name="allure-results-${runner}-${shard}.zip"
                url="https://${{ inputs.neofs_http_gate }}/${{ inputs.neofs_store_objects_cid }}/allure-results-${runner}-${shard}/${zip_name}"
                echo "Discovered URL: $url"
        
                wget "$url" -O "$zip_name"
                unzip -o "$zip_name" -d merged-allure-results/
                rm "$zip_name"
        
                shard_count=$((shard_count + 1))
              fi
            done
        
            if [ "$shard_count" -eq 0 ]; then
              echo "No shard artifacts downloaded."
            fi
          shell: bash          
          

        - name: Check if any results exist
          if: steps.shard_status.outputs.no_shards == 'false'
          id: check_results
          run: |
            count=$(find merged-allure-results -type f -name '*.json' | wc -l)
            echo "Found $count JSON files"
            if [ "$count" -eq 0 ]; then
              echo "no_shards=true" >> $GITHUB_OUTPUT
            else
              echo "no_shards=false" >> $GITHUB_OUTPUT
            fi

        - name: Exit early if no shard jobs ran
          if: steps.shard_status.outputs.no_shards == 'false'
          run: |
            echo "No sharded results found. Skipping merge."
            exit 0

        - name: Combine Allure results
          if: steps.shard_status.outputs.no_shards == 'false'
          run: |
            mkdir -p merged-allure
            find merged-allure-results -type f -name '*.json' -exec cp {} merged-allure/ \;

        - name: Publish to NeoFS
          if: steps.shard_status.outputs.no_shards == 'false'
          id: put_report
          uses: nspcc-dev/gh-push-allure-report-to-neofs@master
          with:
            NEOFS_WALLET: ${{ secrets.TEST_RESULTS_WALLET }}
            NEOFS_WALLET_PASSWORD: ${{ secrets.TEST_RESULTS_PASSWORD }}
            NEOFS_NETWORK_DOMAIN: ${{ inputs.neofs_network_domain }}
            NEOFS_HTTP_GATE: ${{ inputs.neofs_http_gate }}
            STORE_OBJECTS_CID: ${{ inputs.neofs_store_objects_cid }}
            PR_LIFETIME: ${{ inputs.neofs_pr_expiration_period }}
            MASTER_LIFETIME: ${{ inputs.neofs_master_expiration_period }}
            MANUAL_RUN_LIFETIME: ${{ inputs.neofs_manual_expiration_period }}
            OTHER_LIFETIME: ${{ inputs.neofs_other_expiration_period }}
            ALLURE_RESULTS_DIR: merged-allure
            ALLURE_GENERATED_DIR: 'neofs-test-allure-generated-report'

        - name: Post the link to the report
          if: steps.shard_status.outputs.no_shards == 'false' && steps.put_report.outcome == 'success'
          env:
            REPORT_NEOFS_URL: ${{ steps.put_report.outputs.REPORT_NEOFS_URL }}index.html
          uses: guibranco/github-status-action-v2@v1.1.13
          with:
            authToken: ${{ secrets.GITHUB_TOKEN }}
            context: 'Test report MacOS'
            state: ${{ steps.shard_status.outputs.state }}
            sha: ${{ github.event.pull_request.head.sha || github.sha }}
            target_url: ${{ env.REPORT_NEOFS_URL }}
